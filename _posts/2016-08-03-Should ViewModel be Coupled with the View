
---
layout: post
title: Should ViewModel be Coupled with the View
---
Josh Smith had <a href="https://groups.google.com/forum/#!topic/wpf-disciples/P-JwzRB_GE8">a great post </a>on this topic. Although he seems to be the minority on the following discussions, I can't help but agreeing with him. A lot of people seems to believe that have ViewModel agnostic to View is automatically a good thing. I think it should all boils down to benefit/cost analysis. I just can't justify the extra cost in trying to develop a completly View agnostic ViewModel

The costs/benefits I can list for each camp are listed below.
Cost/Benefit of loosely coupled ViewModel
- complex xaml, mixed with dynamic behaviors(ValueConverters, Behaviours)
- complex UI automation test cases to cover the complex view
+ being able to switch view without affecting the ViewModel. But the real benefit has to be aligned with business need. Is there any demand, plan to switch views


Benefit of a tightly coupled ViewModel
+ a much less lightweight View(e.g. reduce ValueConverters, easier to eliminate code behind)
+ less UI Automation testing 
+ it is much easier to unit test ViewModel than UI automation testing the View. So, if putting view specific code( e.g. a visibility property) does not affect the unit testability of the ViewModel, it should be encouraged.

